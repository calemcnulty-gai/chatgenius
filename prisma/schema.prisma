generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  profileImage  String?
  status        String?   @default("active")
  settings      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  workspaceMemberships WorkspaceMembership[]
  messages            Message[]
  aiInteractions     AIInteraction[]
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  memberships WorkspaceMembership[]
  channels    Channel[]
}

model WorkspaceMembership {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  role        String    @default("member") // member, admin
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([workspaceId, userId])
}

model Channel {
  id          String    @id @default(cuid())
  workspaceId String
  name        String
  type        String    @default("public") // public, private
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Message[]
}

model Message {
  id           String    @id @default(cuid())
  channelId    String
  senderId     String
  content      String
  aiGenerated  Boolean   @default(false)
  attachments  Json?
  createdAt    DateTime  @default(now())
  editedAt     DateTime?

  // Relations
  channel     Channel   @relation(fields: [channelId], references: [id])
  sender      User      @relation(fields: [senderId], references: [id])
}

model AIInteraction {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  channelId   String?
  type        String    // summarize, reply, search
  inputText   String
  outputText  String
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])
} 