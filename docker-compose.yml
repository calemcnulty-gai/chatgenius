version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  db_setup:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    command: >
      bash -c "
        echo 'Waiting for postgres...' &&
        until pg_isready -h db -U postgres; do sleep 1; done &&
        echo 'Dropping existing connections...' &&
        psql -h db -U postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = ''chatgenius'' AND pid <> pg_backend_pid();' &&
        echo 'Dropping and recreating database...' &&
        dropdb -h db -U postgres --if-exists chatgenius &&
        createdb -h db -U postgres chatgenius &&
        echo 'Database reset complete.'"
    depends_on:
      db:
        condition: service_healthy

  migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrations
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/chatgenius
    depends_on:
      db_setup:
        condition: service_completed_successfully

  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgres://postgres:postgres@db:5432/chatgenius
    expose:
      - "3000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/chatgenius
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      migrations:
        condition: service_completed_successfully

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - web

volumes:
  postgres_data: 